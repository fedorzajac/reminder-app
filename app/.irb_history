Reminder.all
exit
Time.now
Time.now + 1.month
Time.now + 1.w
Time.now + 1.week
exit
exir
exit
Reminder.where("next_ocurrence < ?", Time.now)
Reminder.where("next_ocurrence > ?", Time.now)
exit
Reminder.all
Reminder.where("next_ocurrence > ?", Time.now)
Reminder.where("next_ocurrence < ?", Time.now)
Reminder.where("next_ocurrence < ?", Time.now)
Reminder.where("next_ocurrence > ?", Time.now)
Time.now
Time.current
exit
Reminder.where("next_ocurrence < ?", Time.current)
Reminder.where("next_ocurrence > ?", Time.current)
Time.current
Time.now
Reminder.where("next_ocurrence > ?", Time.now)
Reminder.where("next_ocurrence < ?", Time.now)
Time.now
Reminder.where(recurrence: 'minutely')
Reminder.where(recurrence: 'minutely').next_ocurrence
Reminder.where(recurrence: 'minutely').first.next_ocurrence
Reminder.where(recurrence: 'minutely').first.next_ocurrence == Time.nov
Reminder.where(recurrence: 'minutely').first.next_ocurrence == Time.now
Reminder.where(recurrence: 'minutely').first.next_ocurrence < Time.now
Reminder.where(recurrence: 'minutely').first.next_ocurrence > Time.now
Reminder.where(recurrence: 'minutely').first.next_ocurrence
Time.current
exit
Time.current
Time.now
Reminder.where("next_ocurrence < ?", Time.now)
RECURRENCE
exit
scheduler = Rufus::Scheduler.new
scheduler.every 'minute' { puts "hello" }
scheduler.every 'minute' do puts "hello" end
scheduler.every '1m' do puts "hello" end
scheduler.every '5s' do puts "hello" end
exit
scheduler.jobs
10.second.from_now
10.seconds.from_now
Reminder.all
exit
Reminder.all
exit
Reminder.all
Reminder.all
exir
exit
Time.now + '1m'
Time.now + 1.minute
exit
Time.at('2025-02-24 09:34:37 UTC')
Rufus::Scheduler.parse('2025-02-24 09:34:37 UTC')
exit
t = Time.now
t.day
Time.now + t.day
tt = Time.now.day + t.day
tt
t1 = Time.now
Time.now - t1
Time.now*2 - t1
Time.now + Time.now - t1
Time.now + (Time.now - t1)
Time.now + (Time.now - t1) + 1.day
Time.now + (Time.now - t1) + 1.week
exit
next_run = "2025-02-24 13:40:00 UTC"
Time.new(next_run\
)
next_run = Time.new(next_run)
Time.now - next_run
delta = Time.now - next_run
next_time += delta
next_time += Time.new(delta)
next_time = next_run + Time.new(delta)
next_time = next_run + delta
delta = next_run - Time.now
next_time = next_run + delta
next_time = next_run + delta.floor
Time.now == next_run
Time.now > next_run
next_run
Time.now
Time.current
exit
